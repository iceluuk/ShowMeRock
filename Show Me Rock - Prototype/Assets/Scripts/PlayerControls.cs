//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7253717c-593a-4e4e-ab76-fbf359dd5b25"",
            ""actions"": [
                {
                    ""name"": ""DashLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5b581ecf-8375-4856-a361-51c2544cf8cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DashRight"",
                    ""type"": ""Button"",
                    ""id"": ""6523d4ed-6a5e-4080-81b9-9bb60d7b6412"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackA"",
                    ""type"": ""Button"",
                    ""id"": ""679e6d28-da2a-46d8-b182-bdce07570e36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackB"",
                    ""type"": ""Button"",
                    ""id"": ""a2ade8c5-7364-4d78-9b82-a39088c96fb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackX"",
                    ""type"": ""Button"",
                    ""id"": ""648fcdb1-505a-4adc-8c2e-0715527b1fca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackY"",
                    ""type"": ""Button"",
                    ""id"": ""b89d2424-329e-406d-bc4d-e23fd5de25d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fedabe03-0e67-4473-b9a7-a85d35e78339"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""006942e9-e484-4f59-ad13-6b52a6ea0e95"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""874daeec-813d-48af-a9b5-913a7dfbd52f"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b97c6f9-3df2-4196-b8a3-ac1f9a3040be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89d22eea-61d2-4565-8ea4-ca444d472a26"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8876118-3b40-46a7-b27a-4a5c981d7691"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edc74750-1270-4546-9f85-cd1f75375ab5"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83627f0f-f2e8-4b36-b50b-1fbe844a343f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c72137ae-f23d-4a3e-9d42-9353bf2f0f8b"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ba1f70c-14d4-4cb3-a0c1-cc808bf90649"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efcd2cee-930b-47a4-a6c8-0f752c963fbc"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""909d9d62-b0c1-4182-9298-e437c13d6f37"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b35b17d-db63-43b8-9ca9-6de355e2a087"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a046baf-dd21-4074-ba43-7a8897c3b5cd"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_DashLeft = m_Player.FindAction("DashLeft", throwIfNotFound: true);
        m_Player_DashRight = m_Player.FindAction("DashRight", throwIfNotFound: true);
        m_Player_AttackA = m_Player.FindAction("AttackA", throwIfNotFound: true);
        m_Player_AttackB = m_Player.FindAction("AttackB", throwIfNotFound: true);
        m_Player_AttackX = m_Player.FindAction("AttackX", throwIfNotFound: true);
        m_Player_AttackY = m_Player.FindAction("AttackY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_DashLeft;
    private readonly InputAction m_Player_DashRight;
    private readonly InputAction m_Player_AttackA;
    private readonly InputAction m_Player_AttackB;
    private readonly InputAction m_Player_AttackX;
    private readonly InputAction m_Player_AttackY;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DashLeft => m_Wrapper.m_Player_DashLeft;
        public InputAction @DashRight => m_Wrapper.m_Player_DashRight;
        public InputAction @AttackA => m_Wrapper.m_Player_AttackA;
        public InputAction @AttackB => m_Wrapper.m_Player_AttackB;
        public InputAction @AttackX => m_Wrapper.m_Player_AttackX;
        public InputAction @AttackY => m_Wrapper.m_Player_AttackY;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @DashLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDashLeft;
                @DashLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDashLeft;
                @DashLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDashLeft;
                @DashRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDashRight;
                @DashRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDashRight;
                @DashRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDashRight;
                @AttackA.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackA;
                @AttackA.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackA;
                @AttackA.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackA;
                @AttackB.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackB;
                @AttackB.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackB;
                @AttackB.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackB;
                @AttackX.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackX;
                @AttackX.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackX;
                @AttackX.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackX;
                @AttackY.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackY;
                @AttackY.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackY;
                @AttackY.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttackY;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DashLeft.started += instance.OnDashLeft;
                @DashLeft.performed += instance.OnDashLeft;
                @DashLeft.canceled += instance.OnDashLeft;
                @DashRight.started += instance.OnDashRight;
                @DashRight.performed += instance.OnDashRight;
                @DashRight.canceled += instance.OnDashRight;
                @AttackA.started += instance.OnAttackA;
                @AttackA.performed += instance.OnAttackA;
                @AttackA.canceled += instance.OnAttackA;
                @AttackB.started += instance.OnAttackB;
                @AttackB.performed += instance.OnAttackB;
                @AttackB.canceled += instance.OnAttackB;
                @AttackX.started += instance.OnAttackX;
                @AttackX.performed += instance.OnAttackX;
                @AttackX.canceled += instance.OnAttackX;
                @AttackY.started += instance.OnAttackY;
                @AttackY.performed += instance.OnAttackY;
                @AttackY.canceled += instance.OnAttackY;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnDashLeft(InputAction.CallbackContext context);
        void OnDashRight(InputAction.CallbackContext context);
        void OnAttackA(InputAction.CallbackContext context);
        void OnAttackB(InputAction.CallbackContext context);
        void OnAttackX(InputAction.CallbackContext context);
        void OnAttackY(InputAction.CallbackContext context);
    }
}
